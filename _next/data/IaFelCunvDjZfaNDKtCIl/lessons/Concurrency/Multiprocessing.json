{"pageProps":{"post":{"attributes":{"title":"Multiprocessing","description":"Multiprocessing"},"html":"<p>Multiprocessing in Python involves using multiple processes to perform tasks concurrently, providing a way to utilize multiple CPU cores. Unlike multithreading, multiprocessing can bypass the Global Interpreter Lock (GIL) in CPython, allowing true parallelism by running separate interpreters in different processes.</p>\n<h3 id=\"key-aspects-of-multiprocessing\">Key Aspects of Multiprocessing:</h3>\n<h4 id=\"1-multiprocessing-module\">1. <code>multiprocessing</code> Module:</h4>\n<p>The <code>multiprocessing</code> module in Python allows the creation and management of processes.</p>\n<h4 id=\"2-creating-processes\">2. Creating Processes:</h4>\n<p>You can create a process by instantiating the <code>Process</code> class and providing a target function to be executed in the new process.</p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">import</span> multiprocessing\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">print_numbers</span>():\n    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">5</span>):\n        <span class=\"hljs-built_in\">print</span>(i)\n\n<span class=\"hljs-comment\"># Create a process</span>\nprocess = multiprocessing.Process(target=print_numbers)\n\n<span class=\"hljs-comment\"># Start the process</span>\nprocess.start()\n\n<span class=\"hljs-comment\"># Wait for the process to finish</span>\nprocess.join()\n</code></pre>\n<h4 id=\"3-communication-between-processes\">3. Communication between Processes:</h4>\n<p>Processes can communicate and share data using various methods like <code>Queue</code>, <code>Pipe</code>, and shared memory.</p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">import</span> multiprocessing\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">square</span>(<span class=\"hljs-params\">n, result_queue</span>):\n    result_queue.put(n * n)\n\n<span class=\"hljs-comment\"># Create a Queue to store results</span>\nresult_queue = multiprocessing.Queue()\n\n<span class=\"hljs-comment\"># Create multiple processes</span>\nprocesses = [\n    multiprocessing.Process(target=square, args=(i, result_queue)) <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">6</span>)\n]\n\n<span class=\"hljs-comment\"># Start the processes</span>\n<span class=\"hljs-keyword\">for</span> process <span class=\"hljs-keyword\">in</span> processes:\n    process.start()\n\n<span class=\"hljs-comment\"># Wait for all processes to finish</span>\n<span class=\"hljs-keyword\">for</span> process <span class=\"hljs-keyword\">in</span> processes:\n    process.join()\n\n<span class=\"hljs-comment\"># Retrieve results from the Queue</span>\n<span class=\"hljs-keyword\">while</span> <span class=\"hljs-keyword\">not</span> result_queue.empty():\n    <span class=\"hljs-built_in\">print</span>(result_queue.get())  <span class=\"hljs-comment\"># Prints squares of numbers 1 to 5</span>\n</code></pre>\n<h4 id=\"4-pooling-of-processes\">4. Pooling of Processes:</h4>\n<p>The <code>Pool</code> class in <code>multiprocessing</code> allows creating a pool of worker processes to execute functions asynchronously.</p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">import</span> multiprocessing\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">square</span>(<span class=\"hljs-params\">n</span>):\n    <span class=\"hljs-keyword\">return</span> n * n\n\n<span class=\"hljs-comment\"># Create a Pool of worker processes</span>\n<span class=\"hljs-keyword\">with</span> multiprocessing.Pool(processes=<span class=\"hljs-number\">3</span>) <span class=\"hljs-keyword\">as</span> pool:\n    result = pool.<span class=\"hljs-built_in\">map</span>(square, [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>])\n\n<span class=\"hljs-built_in\">print</span>(result)  <span class=\"hljs-comment\"># Output: [1, 4, 9, 16, 25]</span>\n</code></pre>\n<h4 id=\"5-shared-memory\">5. Shared Memory:</h4>\n<p>The <code>multiprocessing</code> module provides objects like <code>Value</code> and <code>Array</code> for sharing data between processes using shared memory.</p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">import</span> multiprocessing\n\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">modify_shared_data</span>(<span class=\"hljs-params\">shared_value</span>):\n    shared_value.value += <span class=\"hljs-number\">1</span>\n\nshared_value = multiprocessing.Value(<span class=\"hljs-string\">&#x27;i&#x27;</span>, <span class=\"hljs-number\">0</span>)\n\nprocess = multiprocessing.Process(target=modify_shared_data, args=(shared_value,))\nprocess.start()\nprocess.join()\n\n<span class=\"hljs-built_in\">print</span>(shared_value.value)  <span class=\"hljs-comment\"># Output: 1</span>\n</code></pre>\n<h3 id=\"advantages-of-multiprocessing\">Advantages of Multiprocessing:</h3>\n<ul>\n<li>Utilizes multiple CPU cores effectively.</li>\n<li>Avoids the limitations of the Global Interpreter Lock (GIL), allowing true parallelism.</li>\n<li>Ideal for CPU-bound tasks.</li>\n</ul>\n<h3 id=\"considerations\">Considerations:</h3>\n<ul>\n<li>Overhead in creating and managing processes might be higher compared to threads due to the larger memory footprint.</li>\n<li>Inter-process communication has overhead and might need synchronization mechanisms like <code>Queue</code>, <code>Pipe</code>, or shared memory.</li>\n</ul>\n<p>Multiprocessing in Python provides a robust way to achieve parallelism, particularly for CPU-bound tasks, by leveraging multiple processes running concurrently. Understanding these concepts enables effective utilization of multiprocessing for performance-intensive tasks.</p>\n","markdown":"\nMultiprocessing in Python involves using multiple processes to perform tasks concurrently, providing a way to utilize multiple CPU cores. Unlike multithreading, multiprocessing can bypass the Global Interpreter Lock (GIL) in CPython, allowing true parallelism by running separate interpreters in different processes.\n\n### Key Aspects of Multiprocessing:\n\n#### 1. `multiprocessing` Module:\n\nThe `multiprocessing` module in Python allows the creation and management of processes.\n\n#### 2. Creating Processes:\n\nYou can create a process by instantiating the `Process` class and providing a target function to be executed in the new process.\n\n```python\nimport multiprocessing\n\ndef print_numbers():\n    for i in range(5):\n        print(i)\n\n# Create a process\nprocess = multiprocessing.Process(target=print_numbers)\n\n# Start the process\nprocess.start()\n\n# Wait for the process to finish\nprocess.join()\n```\n\n#### 3. Communication between Processes:\n\nProcesses can communicate and share data using various methods like `Queue`, `Pipe`, and shared memory.\n\n```python\nimport multiprocessing\n\ndef square(n, result_queue):\n    result_queue.put(n * n)\n\n# Create a Queue to store results\nresult_queue = multiprocessing.Queue()\n\n# Create multiple processes\nprocesses = [\n    multiprocessing.Process(target=square, args=(i, result_queue)) for i in range(1, 6)\n]\n\n# Start the processes\nfor process in processes:\n    process.start()\n\n# Wait for all processes to finish\nfor process in processes:\n    process.join()\n\n# Retrieve results from the Queue\nwhile not result_queue.empty():\n    print(result_queue.get())  # Prints squares of numbers 1 to 5\n```\n\n#### 4. Pooling of Processes:\n\nThe `Pool` class in `multiprocessing` allows creating a pool of worker processes to execute functions asynchronously.\n\n```python\nimport multiprocessing\n\ndef square(n):\n    return n * n\n\n# Create a Pool of worker processes\nwith multiprocessing.Pool(processes=3) as pool:\n    result = pool.map(square, [1, 2, 3, 4, 5])\n\nprint(result)  # Output: [1, 4, 9, 16, 25]\n```\n\n#### 5. Shared Memory:\n\nThe `multiprocessing` module provides objects like `Value` and `Array` for sharing data between processes using shared memory.\n\n```python\nimport multiprocessing\n\ndef modify_shared_data(shared_value):\n    shared_value.value += 1\n\nshared_value = multiprocessing.Value('i', 0)\n\nprocess = multiprocessing.Process(target=modify_shared_data, args=(shared_value,))\nprocess.start()\nprocess.join()\n\nprint(shared_value.value)  # Output: 1\n```\n\n### Advantages of Multiprocessing:\n\n- Utilizes multiple CPU cores effectively.\n- Avoids the limitations of the Global Interpreter Lock (GIL), allowing true parallelism.\n- Ideal for CPU-bound tasks.\n\n### Considerations:\n\n- Overhead in creating and managing processes might be higher compared to threads due to the larger memory footprint.\n- Inter-process communication has overhead and might need synchronization mechanisms like `Queue`, `Pipe`, or shared memory.\n\nMultiprocessing in Python provides a robust way to achieve parallelism, particularly for CPU-bound tasks, by leveraging multiple processes running concurrently. Understanding these concepts enables effective utilization of multiprocessing for performance-intensive tasks.","slug":"Multiprocessing","title":"Multiprocessing","section":"Concurrency","icon":"info-circle","filePath":"/home/runner/work/advanced-python/advanced-python/lessons/07-Concurrency/04-Multiprocessing.md","nextSlug":null,"prevSlug":"/advanced-python/lessons/Concurrency/Multithreading2"}},"__N_SSG":true}