{"pageProps":{"post":{"attributes":{"title":"Patterns Implementation","description":"Patterns Implementation"},"html":"<h3 id=\"1-singleton-pattern\">1. Singleton Pattern:</h3>\n<pre><code class=\"language-python\">class Singleton:\n    _instance = None\n\n    def __new__(cls):\n        if not cls._instance:\n            cls._instance = super(Singleton, cls).__new__(cls)\n        return cls._instance\n\n# Usage\nsingleton_instance_1 = Singleton()\nsingleton_instance_2 = Singleton()\n\nprint(singleton_instance_1 is singleton_instance_2)  # Output: True (Both variables reference the same instance)\n</code></pre>\n<h3 id=\"2-factory-method-pattern\">2. Factory Method Pattern:</h3>\n<pre><code class=\"language-python\">from abc import ABC, abstractmethod\n\nclass Animal(ABC):\n    @abstractmethod\n    def sound(self):\n        pass\n\nclass Dog(Animal):\n    def sound(self):\n        return &quot;Woof&quot;\n\nclass Cat(Animal):\n    def sound(self):\n        return &quot;Meow&quot;\n\nclass AnimalFactory:\n    def create_animal(self, animal_type):\n        if animal_type == &#39;dog&#39;:\n            return Dog()\n        elif animal_type == &#39;cat&#39;:\n            return Cat()\n        else:\n            raise ValueError(&quot;Invalid animal type&quot;)\n\n# Usage\nfactory = AnimalFactory()\ndog = factory.create_animal(&#39;dog&#39;)\ncat = factory.create_animal(&#39;cat&#39;)\n\nprint(dog.sound())  # Output: Woof\nprint(cat.sound())  # Output: Meow\n</code></pre>\n<h3 id=\"3-observer-pattern\">3. Observer Pattern:</h3>\n<pre><code class=\"language-python\">class Subject:\n    def __init__(self):\n        self._observers = []\n\n    def attach(self, observer):\n        self._observers.append(observer)\n\n    def detach(self, observer):\n        self._observers.remove(observer)\n\n    def notify(self, value):\n        for observer in self._observers:\n            observer.update(value)\n\nclass Observer:\n    def update(self, value):\n        print(f&quot;Received value: {value}&quot;)\n\n# Usage\nsubject = Subject()\nobserver1 = Observer()\nobserver2 = Observer()\n\nsubject.attach(observer1)\nsubject.attach(observer2)\n\nsubject.notify(&quot;Hello Observers!&quot;)\n</code></pre>\n<p>These examples provide a basic understanding and implementation of some design patterns in Python. The implementations may vary based on specific requirements and contexts. Additionally, Python&#39;s dynamic nature allows for different ways to implement these patterns based on the problem at hand.</p>\n","markdown":"\n### 1. Singleton Pattern:\n\n```python\nclass Singleton:\n    _instance = None\n\n    def __new__(cls):\n        if not cls._instance:\n            cls._instance = super(Singleton, cls).__new__(cls)\n        return cls._instance\n\n# Usage\nsingleton_instance_1 = Singleton()\nsingleton_instance_2 = Singleton()\n\nprint(singleton_instance_1 is singleton_instance_2)  # Output: True (Both variables reference the same instance)\n```\n\n### 2. Factory Method Pattern:\n\n```python\nfrom abc import ABC, abstractmethod\n\nclass Animal(ABC):\n    @abstractmethod\n    def sound(self):\n        pass\n\nclass Dog(Animal):\n    def sound(self):\n        return \"Woof\"\n\nclass Cat(Animal):\n    def sound(self):\n        return \"Meow\"\n\nclass AnimalFactory:\n    def create_animal(self, animal_type):\n        if animal_type == 'dog':\n            return Dog()\n        elif animal_type == 'cat':\n            return Cat()\n        else:\n            raise ValueError(\"Invalid animal type\")\n\n# Usage\nfactory = AnimalFactory()\ndog = factory.create_animal('dog')\ncat = factory.create_animal('cat')\n\nprint(dog.sound())  # Output: Woof\nprint(cat.sound())  # Output: Meow\n```\n\n### 3. Observer Pattern:\n\n```python\nclass Subject:\n    def __init__(self):\n        self._observers = []\n\n    def attach(self, observer):\n        self._observers.append(observer)\n\n    def detach(self, observer):\n        self._observers.remove(observer)\n\n    def notify(self, value):\n        for observer in self._observers:\n            observer.update(value)\n\nclass Observer:\n    def update(self, value):\n        print(f\"Received value: {value}\")\n\n# Usage\nsubject = Subject()\nobserver1 = Observer()\nobserver2 = Observer()\n\nsubject.attach(observer1)\nsubject.attach(observer2)\n\nsubject.notify(\"Hello Observers!\")\n```\n\nThese examples provide a basic understanding and implementation of some design patterns in Python. The implementations may vary based on specific requirements and contexts. Additionally, Python's dynamic nature allows for different ways to implement these patterns based on the problem at hand.","slug":"Patterns-Implementation","title":"Patterns Implementation","section":"Patterns","icon":"dumpster-fire","filePath":"/home/runner/work/advanced-python/advanced-python/lessons/02-Patterns/02-Patterns-Implementation.md","nextSlug":"/advanced-python/lessons/AsyncIO/Introduction","prevSlug":"/advanced-python/lessons/Patterns/Patterns-Introduction"}},"__N_SSG":true}