{"pageProps":{"post":{"attributes":{"title":"FAST API","description":"FAST API Introduction"},"html":"<p>Here&#39;s an example of using FastAPI along with SQLAlchemy to create an endpoint that interacts with a PostgreSQL database to manage user information (username and password).</p>\n<p>First, you&#39;ll need to set up your environment by installing the necessary packages:</p>\n<pre><code class=\"language-bash\">pip install fastapi uvicorn sqlalchemy databases[postgresql]\n</code></pre>\n<p>Here&#39;s the code for setting up FastAPI with SQLAlchemy to manage users:</p>\n<pre><code class=\"language-python\">from fastapi import FastAPI, HTTPException, Depends\nfrom sqlalchemy import create_engine, Column, String\nfrom sqlalchemy.ext.declarative import declarative_base\nfrom sqlalchemy.orm import sessionmaker, Session\nfrom typing import Optional\n\n# Replace the database_url with your PostgreSQL database URL\nDATABASE_URL = &quot;postgresql://username:password@localhost/db_name&quot;\n\n# SQLAlchemy configurations\nengine = create_engine(DATABASE_URL)\nSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\nBase = declarative_base()\n\n# Define User model\nclass User(Base):\n    __tablename__ = &quot;users&quot;\n\n    username = Column(String, primary_key=True, index=True)\n    password = Column(String)\n\n# Create tables in the database\nBase.metadata.create_all(bind=engine)\n\napp = FastAPI()\n\n# Dependency to get the database session\ndef get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()\n\n# Create a new user\n@app.post(&quot;/users/&quot;)\ndef create_user(username: str, password: str, db: Session = Depends(get_db)):\n    hashed_password = password  # You should hash the password for security, not store it as plaintext\n    db_user = User(username=username, password=hashed_password)\n    db.add(db_user)\n    db.commit()\n    return {&quot;username&quot;: username}\n\n# Get user details by username\n@app.get(&quot;/users/{username}&quot;)\ndef get_user(username: str, db: Session = Depends(get_db)):\n    user = db.query(User).filter(User.username == username).first()\n    if user is None:\n        raise HTTPException(status_code=404, detail=&quot;User not found&quot;)\n    return user\n</code></pre>\n<p>Please note:</p>\n<ul>\n<li>Ensure to replace <code>DATABASE_URL</code> with your actual PostgreSQL database URL.</li>\n<li>The code doesn&#39;t include password hashing for simplicity. In practice, you should always hash passwords before storing them in the database for security reasons.</li>\n</ul>\n<p>This code creates an API with two endpoints:</p>\n<ul>\n<li><code>POST /users/</code>: Create a new user by providing a username and password.</li>\n<li><code>GET /users/{username}</code>: Retrieve user details by providing a username.</li>\n</ul>\n<p>Remember to handle password hashing, validation, authentication, and other security-related concerns based on your application&#39;s requirements before deploying this code to production.</p>\n","markdown":"\nHere's an example of using FastAPI along with SQLAlchemy to create an endpoint that interacts with a PostgreSQL database to manage user information (username and password).\n\nFirst, you'll need to set up your environment by installing the necessary packages:\n\n```bash\npip install fastapi uvicorn sqlalchemy databases[postgresql]\n```\n\nHere's the code for setting up FastAPI with SQLAlchemy to manage users:\n\n```python\nfrom fastapi import FastAPI, HTTPException, Depends\nfrom sqlalchemy import create_engine, Column, String\nfrom sqlalchemy.ext.declarative import declarative_base\nfrom sqlalchemy.orm import sessionmaker, Session\nfrom typing import Optional\n\n# Replace the database_url with your PostgreSQL database URL\nDATABASE_URL = \"postgresql://username:password@localhost/db_name\"\n\n# SQLAlchemy configurations\nengine = create_engine(DATABASE_URL)\nSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\nBase = declarative_base()\n\n# Define User model\nclass User(Base):\n    __tablename__ = \"users\"\n\n    username = Column(String, primary_key=True, index=True)\n    password = Column(String)\n\n# Create tables in the database\nBase.metadata.create_all(bind=engine)\n\napp = FastAPI()\n\n# Dependency to get the database session\ndef get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()\n\n# Create a new user\n@app.post(\"/users/\")\ndef create_user(username: str, password: str, db: Session = Depends(get_db)):\n    hashed_password = password  # You should hash the password for security, not store it as plaintext\n    db_user = User(username=username, password=hashed_password)\n    db.add(db_user)\n    db.commit()\n    return {\"username\": username}\n\n# Get user details by username\n@app.get(\"/users/{username}\")\ndef get_user(username: str, db: Session = Depends(get_db)):\n    user = db.query(User).filter(User.username == username).first()\n    if user is None:\n        raise HTTPException(status_code=404, detail=\"User not found\")\n    return user\n```\n\nPlease note:\n- Ensure to replace `DATABASE_URL` with your actual PostgreSQL database URL.\n- The code doesn't include password hashing for simplicity. In practice, you should always hash passwords before storing them in the database for security reasons.\n\nThis code creates an API with two endpoints:\n- `POST /users/`: Create a new user by providing a username and password.\n- `GET /users/{username}`: Retrieve user details by providing a username.\n\nRemember to handle password hashing, validation, authentication, and other security-related concerns based on your application's requirements before deploying this code to production.","slug":"FastAPI","title":"FAST API","section":"Fast API","icon":"info-circle","filePath":"/home/runner/work/advanced-python/advanced-python/lessons/04-Fast API/01-FastAPI.md","nextSlug":"/advanced-python/lessons/Flask/Flask-Structure","prevSlug":"/advanced-python/lessons/AsyncIO/Introduction"}},"__N_SSG":true}