{"pageProps":{"post":{"attributes":{"title":"Async IO","description":"Async IO"},"html":"<p>In Python, <code>async</code> and <code>await</code> are used in asynchronous programming to define and work with coroutines, allowing for non-blocking execution of code. Asynchronous programming is beneficial when dealing with I/O-bound tasks like network operations, file I/O, or accessing databases, where waiting for the result can cause delays.</p>\n<p>Here&#39;s a breakdown of <code>async</code> and <code>await</code>:</p>\n<h3 id=\"async\"><code>async</code>:</h3>\n<ul>\n<li><code>async</code> is used to declare that a function is a coroutine, which can run asynchronously.</li>\n<li>When a function is declared with <code>async</code>, it allows you to use <code>await</code> within that function, indicating where the coroutine should wait for the result of another coroutine or asynchronous operation.</li>\n</ul>\n<h3 id=\"await\"><code>await</code>:</h3>\n<ul>\n<li><code>await</code> is used within an <code>async</code> function to pause the execution of that coroutine until the awaited coroutine or asynchronous operation completes.</li>\n<li>It allows you to wait for the result of other coroutines, such as I/O operations, without blocking the execution of other code.</li>\n</ul>\n<h3 id=\"example\">Example:</h3>\n<p>Consider a simple example of asynchronous code using <code>async</code> and <code>await</code> in Python with <code>asyncio</code>, Python&#39;s built-in library for asynchronous programming:</p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">import</span> asyncio\n\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">say_hello</span>():\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;Hello&quot;</span>)\n    <span class=\"hljs-keyword\">await</span> asyncio.sleep(<span class=\"hljs-number\">1</span>)  <span class=\"hljs-comment\"># Simulate a delay without blocking</span>\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&quot;World!&quot;</span>)\n\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">main</span>():\n    <span class=\"hljs-keyword\">await</span> say_hello()\n\n<span class=\"hljs-comment\"># Run the coroutine</span>\nasyncio.run(main())\n</code></pre>\n<p>Explanation:</p>\n<ul>\n<li>The <code>say_hello()</code> function is a coroutine declared with <code>async</code>.</li>\n<li>Inside <code>say_hello()</code>, the <code>await asyncio.sleep(1)</code> line pauses the coroutine for 1 second without blocking other tasks. This simulates an asynchronous operation (in this case, a delay).</li>\n<li>The <code>main()</code> function is also a coroutine declared with <code>async</code>, which calls <code>say_hello()</code> using <code>await</code>.</li>\n<li>Finally, <code>asyncio.run(main())</code> is used to execute the <code>main()</code> coroutine.</li>\n</ul>\n<p>When <code>await asyncio.sleep(1)</code> is encountered, the <code>say_hello()</code> coroutine is paused for 1 second, allowing other asynchronous operations or coroutines to run concurrently. This non-blocking behavior is fundamental in asynchronous programming to prevent waiting for I/O operations and to utilize resources efficiently.</p>\n<p>Asynchronous programming with <code>async</code> and <code>await</code> in Python enables developers to write more responsive and efficient code, especially when dealing with I/O-bound tasks that would otherwise lead to unnecessary waiting.</p>\n","markdown":"\nIn Python, `async` and `await` are used in asynchronous programming to define and work with coroutines, allowing for non-blocking execution of code. Asynchronous programming is beneficial when dealing with I/O-bound tasks like network operations, file I/O, or accessing databases, where waiting for the result can cause delays.\n\nHere's a breakdown of `async` and `await`:\n\n### `async`:\n- `async` is used to declare that a function is a coroutine, which can run asynchronously.\n- When a function is declared with `async`, it allows you to use `await` within that function, indicating where the coroutine should wait for the result of another coroutine or asynchronous operation.\n\n### `await`:\n- `await` is used within an `async` function to pause the execution of that coroutine until the awaited coroutine or asynchronous operation completes.\n- It allows you to wait for the result of other coroutines, such as I/O operations, without blocking the execution of other code.\n\n### Example:\n\nConsider a simple example of asynchronous code using `async` and `await` in Python with `asyncio`, Python's built-in library for asynchronous programming:\n\n```python\nimport asyncio\n\nasync def say_hello():\n    print(\"Hello\")\n    await asyncio.sleep(1)  # Simulate a delay without blocking\n    print(\"World!\")\n\nasync def main():\n    await say_hello()\n\n# Run the coroutine\nasyncio.run(main())\n```\n\nExplanation:\n- The `say_hello()` function is a coroutine declared with `async`.\n- Inside `say_hello()`, the `await asyncio.sleep(1)` line pauses the coroutine for 1 second without blocking other tasks. This simulates an asynchronous operation (in this case, a delay).\n- The `main()` function is also a coroutine declared with `async`, which calls `say_hello()` using `await`.\n- Finally, `asyncio.run(main())` is used to execute the `main()` coroutine.\n\nWhen `await asyncio.sleep(1)` is encountered, the `say_hello()` coroutine is paused for 1 second, allowing other asynchronous operations or coroutines to run concurrently. This non-blocking behavior is fundamental in asynchronous programming to prevent waiting for I/O operations and to utilize resources efficiently.\n\nAsynchronous programming with `async` and `await` in Python enables developers to write more responsive and efficient code, especially when dealing with I/O-bound tasks that would otherwise lead to unnecessary waiting.","slug":"Introduction","title":"Async IO","section":"AsyncIO","icon":"info-circle","filePath":"/home/runner/work/advanced-python/advanced-python/lessons/03-AsyncIO/01-Introduction.md","nextSlug":"/advanced-python/lessons/Fast API/FastAPI","prevSlug":"/advanced-python/lessons/Patterns/Patterns-Implementation"}},"__N_SSG":true}