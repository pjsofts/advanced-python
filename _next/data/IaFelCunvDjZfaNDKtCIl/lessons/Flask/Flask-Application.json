{"pageProps":{"post":{"attributes":{"title":"Flask Application","description":"Flask Application"},"html":"<p>Below is an example of how you might structure a Flask application with a &#39;users&#39; entity using the recommended project structure:</p>\n<h3 id=\"folder-structure\">Folder Structure:</h3>\n<pre><code>my_flask_app/\n│\n├── app/\n│   ├── __init__.py\n│   ├── models/\n│   │   └── user.py\n│   ├── views/\n│   │   └── user_views.py\n│   ├── services/\n│   │   └── user_service.py\n│   ├── forms/\n│   │   └── user_forms.py\n│   ├── static/\n│   └── templates/\n├── config.py\n├── requirements.txt\n└── run.py\n</code></pre>\n<h3 id=\"code-example\">Code Example:</h3>\n<h4 id=\"app__init__py-initialization\"><code>app/__init__.py</code> (Initialization)</h4>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">from</span> flask <span class=\"hljs-keyword\">import</span> Flask\n<span class=\"hljs-keyword\">from</span> config <span class=\"hljs-keyword\">import</span> Config\n<span class=\"hljs-keyword\">from</span> flask_sqlalchemy <span class=\"hljs-keyword\">import</span> SQLAlchemy\n\napp = Flask(__name__)\napp.config.from_object(Config)\ndb = SQLAlchemy(app)\n\n<span class=\"hljs-keyword\">from</span> app.views <span class=\"hljs-keyword\">import</span> user_views  <span class=\"hljs-comment\"># Importing views here to register the routes</span>\n</code></pre>\n<h4 id=\"appmodelsuserpy-user-model\"><code>app/models/user.py</code> (User Model)</h4>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">from</span> app <span class=\"hljs-keyword\">import</span> db\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">User</span>(db.Model):\n    <span class=\"hljs-built_in\">id</span> = db.Column(db.Integer, primary_key=<span class=\"hljs-literal\">True</span>)\n    username = db.Column(db.String(<span class=\"hljs-number\">50</span>), unique=<span class=\"hljs-literal\">True</span>, nullable=<span class=\"hljs-literal\">False</span>)\n    password = db.Column(db.String(<span class=\"hljs-number\">100</span>), nullable=<span class=\"hljs-literal\">False</span>)\n    <span class=\"hljs-comment\"># Other user attributes...</span>\n</code></pre>\n<h4 id=\"appviewsuser_viewspy-user-routes\"><code>app/views/user_views.py</code> (User Routes)</h4>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">from</span> app <span class=\"hljs-keyword\">import</span> app\n<span class=\"hljs-keyword\">from</span> flask <span class=\"hljs-keyword\">import</span> jsonify\n<span class=\"hljs-keyword\">from</span> app.services.user_service <span class=\"hljs-keyword\">import</span> UserService\n\n<span class=\"hljs-meta\">@app.route(<span class=\"hljs-params\"><span class=\"hljs-string\">&#x27;/users&#x27;</span>, methods=[<span class=\"hljs-string\">&#x27;GET&#x27;</span>]</span>)</span>\n<span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">get_users</span>():\n    users = UserService.get_all_users()\n    <span class=\"hljs-keyword\">return</span> jsonify(users)\n\n<span class=\"hljs-comment\"># Other user-related routes (e.g., create, update, delete)</span>\n</code></pre>\n<h4 id=\"appservicesuser_servicepy-user-service\"><code>app/services/user_service.py</code> (User Service)</h4>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">from</span> app.models.user <span class=\"hljs-keyword\">import</span> User\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">UserService</span>:\n<span class=\"hljs-meta\">    @staticmethod</span>\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">get_all_users</span>():\n        <span class=\"hljs-keyword\">return</span> User.query.<span class=\"hljs-built_in\">all</span>()\n\n    <span class=\"hljs-comment\"># Implement other user-related business logic here...</span>\n</code></pre>\n<h4 id=\"appformsuser_formspy-user-forms-or-schemas---for-validation-serialization\"><code>app/forms/user_forms.py</code> (User Forms or Schemas - for validation, serialization)</h4>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">from</span> flask_wtf <span class=\"hljs-keyword\">import</span> FlaskForm\n<span class=\"hljs-keyword\">from</span> wtforms <span class=\"hljs-keyword\">import</span> StringField, PasswordField\n<span class=\"hljs-keyword\">from</span> wtforms.validators <span class=\"hljs-keyword\">import</span> DataRequired, Length\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">UserForm</span>(<span class=\"hljs-title class_ inherited__\">FlaskForm</span>):\n    username = StringField(<span class=\"hljs-string\">&#x27;Username&#x27;</span>, validators=[DataRequired(), Length(<span class=\"hljs-built_in\">min</span>=<span class=\"hljs-number\">4</span>, <span class=\"hljs-built_in\">max</span>=<span class=\"hljs-number\">50</span>)])\n    password = PasswordField(<span class=\"hljs-string\">&#x27;Password&#x27;</span>, validators=[DataRequired(), Length(<span class=\"hljs-built_in\">min</span>=<span class=\"hljs-number\">6</span>)])\n    <span class=\"hljs-comment\"># Other form fields...</span>\n</code></pre>\n<h4 id=\"configpy-configuration-file\"><code>config.py</code> (Configuration File)</h4>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Config</span>:\n    SQLALCHEMY_DATABASE_URI = <span class=\"hljs-string\">&#x27;sqlite:///site.db&#x27;</span>  <span class=\"hljs-comment\"># Replace with your database URI</span>\n    SQLALCHEMY_TRACK_MODIFICATIONS = <span class=\"hljs-literal\">False</span>\n</code></pre>\n<h4 id=\"runpy-entry-point\"><code>run.py</code> (Entry Point)</h4>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">from</span> app <span class=\"hljs-keyword\">import</span> app\n\n<span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&#x27;__main__&#x27;</span>:\n    app.run(debug=<span class=\"hljs-literal\">True</span>)\n</code></pre>\n<p>This structure separates concerns by having models for the database, views for routing, services for business logic, and forms for handling user input. You can expand each file or module based on your project&#39;s requirements, adding user creation, authentication, validation, and other functionalities related to user management. Adjust the database URI and configurations according to your database setup.</p>\n","markdown":"\nBelow is an example of how you might structure a Flask application with a 'users' entity using the recommended project structure:\n\n### Folder Structure:\n\n```\nmy_flask_app/\n│\n├── app/\n│   ├── __init__.py\n│   ├── models/\n│   │   └── user.py\n│   ├── views/\n│   │   └── user_views.py\n│   ├── services/\n│   │   └── user_service.py\n│   ├── forms/\n│   │   └── user_forms.py\n│   ├── static/\n│   └── templates/\n├── config.py\n├── requirements.txt\n└── run.py\n```\n\n### Code Example:\n\n#### `app/__init__.py` (Initialization)\n\n```python\nfrom flask import Flask\nfrom config import Config\nfrom flask_sqlalchemy import SQLAlchemy\n\napp = Flask(__name__)\napp.config.from_object(Config)\ndb = SQLAlchemy(app)\n\nfrom app.views import user_views  # Importing views here to register the routes\n```\n\n#### `app/models/user.py` (User Model)\n\n```python\nfrom app import db\n\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    username = db.Column(db.String(50), unique=True, nullable=False)\n    password = db.Column(db.String(100), nullable=False)\n    # Other user attributes...\n```\n\n#### `app/views/user_views.py` (User Routes)\n\n```python\nfrom app import app\nfrom flask import jsonify\nfrom app.services.user_service import UserService\n\n@app.route('/users', methods=['GET'])\ndef get_users():\n    users = UserService.get_all_users()\n    return jsonify(users)\n\n# Other user-related routes (e.g., create, update, delete)\n```\n\n#### `app/services/user_service.py` (User Service)\n\n```python\nfrom app.models.user import User\n\nclass UserService:\n    @staticmethod\n    def get_all_users():\n        return User.query.all()\n\n    # Implement other user-related business logic here...\n```\n\n#### `app/forms/user_forms.py` (User Forms or Schemas - for validation, serialization)\n\n```python\nfrom flask_wtf import FlaskForm\nfrom wtforms import StringField, PasswordField\nfrom wtforms.validators import DataRequired, Length\n\nclass UserForm(FlaskForm):\n    username = StringField('Username', validators=[DataRequired(), Length(min=4, max=50)])\n    password = PasswordField('Password', validators=[DataRequired(), Length(min=6)])\n    # Other form fields...\n```\n\n#### `config.py` (Configuration File)\n\n```python\nclass Config:\n    SQLALCHEMY_DATABASE_URI = 'sqlite:///site.db'  # Replace with your database URI\n    SQLALCHEMY_TRACK_MODIFICATIONS = False\n```\n\n#### `run.py` (Entry Point)\n\n```python\nfrom app import app\n\nif __name__ == '__main__':\n    app.run(debug=True)\n```\n\nThis structure separates concerns by having models for the database, views for routing, services for business logic, and forms for handling user input. You can expand each file or module based on your project's requirements, adding user creation, authentication, validation, and other functionalities related to user management. Adjust the database URI and configurations according to your database setup.","slug":"Flask-Application","title":"Flask Application","section":"Flask","icon":"info-circle","filePath":"/home/runner/work/advanced-python/advanced-python/lessons/05-Flask/02-Flask-Application.md","nextSlug":"/advanced-python/lessons/Object-Oriented-Programming/OOP1","prevSlug":"/advanced-python/lessons/Flask/Flask-Structure"}},"__N_SSG":true}