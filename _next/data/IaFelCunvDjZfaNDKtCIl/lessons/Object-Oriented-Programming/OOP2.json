{"pageProps":{"post":{"attributes":{"title":"Object Oriented Programming-2","description":"Object Oriented Programming-2"},"html":"<p>Let&#39;s continue exploring object-oriented programming (OOP) in Python with a focus on class methods, static methods, and class inheritance.</p>\n<h3 id=\"class-methods-and-static-methods\">Class Methods and Static Methods:</h3>\n<h4 id=\"class-methods\">Class Methods:</h4>\n<p>Class methods are methods that are bound to the class rather than its instances. They can be accessed using the class itself or its instances. They are defined using the <code>@classmethod</code> decorator.</p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MyClass</span>:\n    class_attribute = <span class=\"hljs-number\">10</span>\n\n<span class=\"hljs-meta\">    @classmethod</span>\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">class_method</span>(<span class=\"hljs-params\">cls</span>):\n        <span class=\"hljs-keyword\">return</span> cls.class_attribute * <span class=\"hljs-number\">2</span>\n\n<span class=\"hljs-comment\"># Accessing class method</span>\nresult = MyClass.class_method()\n<span class=\"hljs-built_in\">print</span>(result)  <span class=\"hljs-comment\"># Output: 20</span>\n</code></pre>\n<h4 id=\"static-methods\">Static Methods:</h4>\n<p>Static methods are independent of the class and its instances. They are defined using the <code>@staticmethod</code> decorator. They don&#39;t have access to class or instance attributes.</p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MyClass</span>:\n<span class=\"hljs-meta\">    @staticmethod</span>\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">static_method</span>(<span class=\"hljs-params\">x, y</span>):\n        <span class=\"hljs-keyword\">return</span> x + y\n\n<span class=\"hljs-comment\"># Accessing static method</span>\nresult = MyClass.static_method(<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">3</span>)\n<span class=\"hljs-built_in\">print</span>(result)  <span class=\"hljs-comment\"># Output: 8</span>\n</code></pre>\n<h3 id=\"class-inheritance\">Class Inheritance:</h3>\n<h4 id=\"single-inheritance\">Single Inheritance:</h4>\n<p>In Python, a class can inherit attributes and methods from a single parent class.</p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Animal</span>:\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">make_sound</span>(<span class=\"hljs-params\">self</span>):\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;Some generic sound&quot;</span>\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Dog</span>(<span class=\"hljs-title class_ inherited__\">Animal</span>):\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">make_sound</span>(<span class=\"hljs-params\">self</span>):\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;Bark&quot;</span>\n\ndog = Dog()\n<span class=\"hljs-built_in\">print</span>(dog.make_sound())  <span class=\"hljs-comment\"># Output: Bark</span>\n</code></pre>\n<h4 id=\"method-overriding\">Method Overriding:</h4>\n<p>Child classes can override methods of the parent class by defining a method with the same name in the child class.</p>\n<h4 id=\"multiple-inheritance\">Multiple Inheritance:</h4>\n<p>Python supports multiple inheritance where a class can inherit from more than one parent class.</p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">A</span>:\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">method_A</span>(<span class=\"hljs-params\">self</span>):\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;Method A&quot;</span>\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">B</span>:\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">method_B</span>(<span class=\"hljs-params\">self</span>):\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;Method B&quot;</span>\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">C</span>(A, B):\n    <span class=\"hljs-keyword\">pass</span>\n\nobj = C()\n<span class=\"hljs-built_in\">print</span>(obj.method_A())  <span class=\"hljs-comment\"># Output: Method A</span>\n<span class=\"hljs-built_in\">print</span>(obj.method_B())  <span class=\"hljs-comment\"># Output: Method B</span>\n</code></pre>\n<h4 id=\"method-resolution-order-mro\">Method Resolution Order (MRO):</h4>\n<p>The method resolution order defines the order in which Python searches for methods in a hierarchy of classes during method calls.</p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">X</span>:\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">method</span>(<span class=\"hljs-params\">self</span>):\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;Method X&quot;</span>\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Y</span>(<span class=\"hljs-title class_ inherited__\">X</span>):\n    <span class=\"hljs-keyword\">pass</span>\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Z</span>(<span class=\"hljs-title class_ inherited__\">X</span>):\n    <span class=\"hljs-keyword\">def</span> <span class=\"hljs-title function_\">method</span>(<span class=\"hljs-params\">self</span>):\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;Method Z&quot;</span>\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">A</span>(Y, Z):\n    <span class=\"hljs-keyword\">pass</span>\n\nobj = A()\n<span class=\"hljs-built_in\">print</span>(obj.method())  <span class=\"hljs-comment\"># Output: Method Z</span>\n</code></pre>\n<h3 id=\"explanation\">Explanation:</h3>\n<ul>\n<li><strong>Class Methods and Static Methods:</strong> Used for functionalities related to the class itself without the need for instances.</li>\n<li><strong>Inheritance:</strong> Allows classes to inherit attributes and methods from other classes, facilitating code reuse.</li>\n<li><strong>Method Overriding:</strong> Child classes can redefine methods inherited from parent classes.</li>\n</ul>\n<p>Understanding these concepts in Python&#39;s OOP paradigm helps in structuring code, building relationships between classes, and creating more maintainable and scalable applications.</p>\n","markdown":"\nLet's continue exploring object-oriented programming (OOP) in Python with a focus on class methods, static methods, and class inheritance.\n\n### Class Methods and Static Methods:\n\n#### Class Methods:\n\nClass methods are methods that are bound to the class rather than its instances. They can be accessed using the class itself or its instances. They are defined using the `@classmethod` decorator.\n\n```python\nclass MyClass:\n    class_attribute = 10\n\n    @classmethod\n    def class_method(cls):\n        return cls.class_attribute * 2\n\n# Accessing class method\nresult = MyClass.class_method()\nprint(result)  # Output: 20\n```\n\n#### Static Methods:\n\nStatic methods are independent of the class and its instances. They are defined using the `@staticmethod` decorator. They don't have access to class or instance attributes.\n\n```python\nclass MyClass:\n    @staticmethod\n    def static_method(x, y):\n        return x + y\n\n# Accessing static method\nresult = MyClass.static_method(5, 3)\nprint(result)  # Output: 8\n```\n\n### Class Inheritance:\n\n#### Single Inheritance:\n\nIn Python, a class can inherit attributes and methods from a single parent class.\n\n```python\nclass Animal:\n    def make_sound(self):\n        return \"Some generic sound\"\n\nclass Dog(Animal):\n    def make_sound(self):\n        return \"Bark\"\n\ndog = Dog()\nprint(dog.make_sound())  # Output: Bark\n```\n\n#### Method Overriding:\n\nChild classes can override methods of the parent class by defining a method with the same name in the child class.\n\n#### Multiple Inheritance:\n\nPython supports multiple inheritance where a class can inherit from more than one parent class.\n\n```python\nclass A:\n    def method_A(self):\n        return \"Method A\"\n\nclass B:\n    def method_B(self):\n        return \"Method B\"\n\nclass C(A, B):\n    pass\n\nobj = C()\nprint(obj.method_A())  # Output: Method A\nprint(obj.method_B())  # Output: Method B\n```\n\n#### Method Resolution Order (MRO):\n\nThe method resolution order defines the order in which Python searches for methods in a hierarchy of classes during method calls.\n\n```python\nclass X:\n    def method(self):\n        return \"Method X\"\n\nclass Y(X):\n    pass\n\nclass Z(X):\n    def method(self):\n        return \"Method Z\"\n\nclass A(Y, Z):\n    pass\n\nobj = A()\nprint(obj.method())  # Output: Method Z\n```\n\n### Explanation:\n\n- **Class Methods and Static Methods:** Used for functionalities related to the class itself without the need for instances.\n- **Inheritance:** Allows classes to inherit attributes and methods from other classes, facilitating code reuse.\n- **Method Overriding:** Child classes can redefine methods inherited from parent classes.\n\nUnderstanding these concepts in Python's OOP paradigm helps in structuring code, building relationships between classes, and creating more maintainable and scalable applications.","slug":"OOP2","title":"Object Oriented Programming-2","section":"Object Oriented Programming","icon":"info-circle","filePath":"/home/runner/work/advanced-python/advanced-python/lessons/06-Object-Oriented-Programming/02-OOP2.md","nextSlug":"/advanced-python/lessons/Concurrency/Futures","prevSlug":"/advanced-python/lessons/Object-Oriented-Programming/OOP1"}},"__N_SSG":true}