{"pageProps":{"post":{"attributes":{"title":"Object Oriented Programming","description":"Object Oriented Programming"},"html":"<p>Let&#39;s start with the basics of Object-Oriented Programming (OOP) in Python.</p>\n<h3 id=\"classes-and-objects\">Classes and Objects:</h3>\n<p>In Python, a class is a blueprint for creating objects. An object is an instance of a class that encapsulates data (attributes) and functions (methods) that operate on the data. Here&#39;s an example:</p>\n<h4 id=\"creating-a-simple-class\">Creating a simple class:</h4>\n<pre><code class=\"language-python\">class Car:\n    # Constructor / Initialization method\n    def __init__(self, make, model, year):\n        self.make = make\n        self.model = model\n        self.year = year\n\n    # Method to display car details\n    def display_info(self):\n        print(f&quot;{self.year} {self.make} {self.model}&quot;)\n\n# Creating an instance (object) of the Car class\ncar1 = Car(&quot;Toyota&quot;, &quot;Corolla&quot;, 2022)\n\n# Accessing attributes and calling methods\nprint(car1.make)  # Output: Toyota\ncar1.display_info()  # Output: 2022 Toyota Corolla\n</code></pre>\n<h3 id=\"explanation\">Explanation:</h3>\n<ul>\n<li><code>class Car:</code>: Defines a class named <code>Car</code>.</li>\n<li><code>__init__(self, make, model, year)</code>: The constructor method initializes the object&#39;s attributes (<code>make</code>, <code>model</code>, <code>year</code>).</li>\n<li><code>self</code>: Refers to the instance of the class (similar to <code>this</code> in other languages).</li>\n<li><code>display_info(self)</code>: A method that displays the car&#39;s information.</li>\n</ul>\n<h4 id=\"class-attributes-vs-instance-attributes\">Class Attributes vs. Instance Attributes:</h4>\n<ul>\n<li><p><strong>Class Attributes:</strong> Attributes shared by all instances of a class.</p>\n<pre><code class=\"language-python\">class Car:\n    wheels = 4  # Class attribute\n\ncar1 = Car()\ncar2 = Car()\nprint(car1.wheels)  # Output: 4\nprint(car2.wheels)  # Output: 4\n</code></pre>\n</li>\n<li><p><strong>Instance Attributes:</strong> Attributes specific to each instance.</p>\n<pre><code class=\"language-python\">class Car:\n    def __init__(self, make, model):\n        self.make = make  # Instance attribute\n        self.model = model  # Instance attribute\n\ncar1 = Car(&quot;Toyota&quot;, &quot;Corolla&quot;)\ncar2 = Car(&quot;BMW&quot;, &quot;X5&quot;)\nprint(car1.make)  # Output: Toyota\nprint(car2.make)  # Output: BMW\n</code></pre>\n</li>\n</ul>\n<h3 id=\"inheritance\">Inheritance:</h3>\n<p>One of the pillars of OOP is inheritance, where a new class can inherit attributes and methods from another class. </p>\n<h4 id=\"example-of-inheritance\">Example of Inheritance:</h4>\n<pre><code class=\"language-python\">class Vehicle:\n    def __init__(self, make, model):\n        self.make = make\n        self.model = model\n\n    def display_info(self):\n        print(f&quot;{self.make} {self.model} - Vehicle&quot;)\n\nclass Car(Vehicle):\n    def __init__(self, make, model, year):\n        super().__init__(make, model)\n        self.year = year\n\n    def display_info(self):\n        print(f&quot;{self.make} {self.model} {self.year} - Car&quot;)\n\ncar = Car(&quot;Toyota&quot;, &quot;Corolla&quot;, 2022)\ncar.display_info()  # Output: Toyota Corolla 2022 - Car\n</code></pre>\n<h3 id=\"explanation-1\">Explanation:</h3>\n<ul>\n<li><code>class Vehicle:</code>: Defines the base class <code>Vehicle</code>.</li>\n<li><code>class Car(Vehicle):</code>: Defines the <code>Car</code> class that inherits from <code>Vehicle</code>.</li>\n<li><code>super().__init__(make, model)</code>: Calls the constructor of the superclass (<code>Vehicle</code>) to initialize <code>make</code> and <code>model</code>.</li>\n</ul>\n<p>This is a basic overview of creating classes, objects, inheritance, and the use of constructors and methods in Python&#39;s object-oriented paradigm. OOP in Python provides a way to create clean, reusable, and modular code by organizing data and functionality into classes and objects.</p>\n","markdown":"\nLet's start with the basics of Object-Oriented Programming (OOP) in Python.\n\n### Classes and Objects:\n\nIn Python, a class is a blueprint for creating objects. An object is an instance of a class that encapsulates data (attributes) and functions (methods) that operate on the data. Here's an example:\n\n#### Creating a simple class:\n\n```python\nclass Car:\n    # Constructor / Initialization method\n    def __init__(self, make, model, year):\n        self.make = make\n        self.model = model\n        self.year = year\n\n    # Method to display car details\n    def display_info(self):\n        print(f\"{self.year} {self.make} {self.model}\")\n\n# Creating an instance (object) of the Car class\ncar1 = Car(\"Toyota\", \"Corolla\", 2022)\n\n# Accessing attributes and calling methods\nprint(car1.make)  # Output: Toyota\ncar1.display_info()  # Output: 2022 Toyota Corolla\n```\n\n### Explanation:\n\n- `class Car:`: Defines a class named `Car`.\n- `__init__(self, make, model, year)`: The constructor method initializes the object's attributes (`make`, `model`, `year`).\n- `self`: Refers to the instance of the class (similar to `this` in other languages).\n- `display_info(self)`: A method that displays the car's information.\n\n#### Class Attributes vs. Instance Attributes:\n\n- **Class Attributes:** Attributes shared by all instances of a class.\n  \n  ```python\n  class Car:\n      wheels = 4  # Class attribute\n  \n  car1 = Car()\n  car2 = Car()\n  print(car1.wheels)  # Output: 4\n  print(car2.wheels)  # Output: 4\n  ```\n\n- **Instance Attributes:** Attributes specific to each instance.\n  \n  ```python\n  class Car:\n      def __init__(self, make, model):\n          self.make = make  # Instance attribute\n          self.model = model  # Instance attribute\n  \n  car1 = Car(\"Toyota\", \"Corolla\")\n  car2 = Car(\"BMW\", \"X5\")\n  print(car1.make)  # Output: Toyota\n  print(car2.make)  # Output: BMW\n  ```\n\n### Inheritance:\n\nOne of the pillars of OOP is inheritance, where a new class can inherit attributes and methods from another class. \n\n#### Example of Inheritance:\n\n```python\nclass Vehicle:\n    def __init__(self, make, model):\n        self.make = make\n        self.model = model\n\n    def display_info(self):\n        print(f\"{self.make} {self.model} - Vehicle\")\n\nclass Car(Vehicle):\n    def __init__(self, make, model, year):\n        super().__init__(make, model)\n        self.year = year\n\n    def display_info(self):\n        print(f\"{self.make} {self.model} {self.year} - Car\")\n\ncar = Car(\"Toyota\", \"Corolla\", 2022)\ncar.display_info()  # Output: Toyota Corolla 2022 - Car\n```\n\n### Explanation:\n\n- `class Vehicle:`: Defines the base class `Vehicle`.\n- `class Car(Vehicle):`: Defines the `Car` class that inherits from `Vehicle`.\n- `super().__init__(make, model)`: Calls the constructor of the superclass (`Vehicle`) to initialize `make` and `model`.\n\nThis is a basic overview of creating classes, objects, inheritance, and the use of constructors and methods in Python's object-oriented paradigm. OOP in Python provides a way to create clean, reusable, and modular code by organizing data and functionality into classes and objects.","slug":"OOP1","title":"Object Oriented Programming","section":"Object Oriented Programming","icon":"info-circle","filePath":"/home/runner/work/advanced-python/advanced-python/lessons/06-Object-Oriented-Programming/01-OOP1.md","nextSlug":"/advanced-python/lessons/Object-Oriented-Programming/OOP2","prevSlug":"/advanced-python/lessons/Flask/Flask-Application"}},"__N_SSG":true}